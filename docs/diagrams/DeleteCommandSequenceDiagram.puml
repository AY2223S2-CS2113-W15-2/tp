@startuml
'https://plantuml.com/sequence-diagram

participant ":Parser" as Parser
participant "command:DeleteCommand" as DeleteCommand
participant "requestGet:Request" as RequestGet
participant "backend:Backend" as Backend
participant "endpoint:entryEndpoint" as Endpoint
participant "entries:EntryLog" as EntryLog
participant "responseGet:Response" as ResponseGet
participant "requestDelete:Request" as RequestDelete
participant "responseDelete:Response" as ResponseDelete
participant "UI" as UI

Parser -> DeleteCommand ** : DeleteCommand(entryId)
activate DeleteCommand
return command

-> DeleteCommand :execute()
activate DeleteCommand
DeleteCommand -> RequestGet ** : Request(GET, entryId)
RequestGet --> DeleteCommand : requestGet
DeleteCommand -> Backend : requestEndpointEntry(requestGet)
Backend -> Endpoint : handRequest(requestGet)
Endpoint -> Endpoint : handleGet(requestGet)
Endpoint -> EntryLog : getEntry(entryId)
EntryLog --> Endpoint : entryObj
Endpoint -> ResponseGet ** : (ResponseStatus, " ")
ResponseGet --> Endpoint : responseGet
Endpoint -->Backend: responseGet
Backend --> DeleteCommand : responseGet

DeleteCommand -> RequestDelete ** : Request(DELETE, entryId)
RequestDelete --> DeleteCommand
DeleteCommand -> Backend : requestEndpointEntry(requestDelete)
Backend -> Endpoint : handRequest(requestDelete)
Endpoint -> Endpoint : handleGet(requestDelete)
Endpoint -> EntryLog : deleteEntry(entryId)
EntryLog -> EntryLog : remove(entryId)
EntryLog --> Endpoint
Endpoint -> ResponseDelete ** : Response(responseStatus, " ")
ResponseDelete --> Endpoint : responseDelete
Endpoint --> Backend : responseDelete


alt responseDelete.getResponseStatus() == ResponseStatus.NOT_FOUND
    DeleteCommand --> Parser : exception
else else
    DeleteCommand -> UI:printExpenditureDeleted(deletedEntry)
    UI --> DeleteCommand
    deactivate DeleteCommand
end
@enduml